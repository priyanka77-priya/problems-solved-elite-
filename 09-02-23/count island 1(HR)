import collections
rows,cols=[int(x) for x in input().split()]
l=[]
visited=[[False for p in range(cols)] for q in range(rows)]
for i in range(rows):
    l.append([int(x) for x in input().split()])
row=[-1,-1,-1,0,1,0,1,1]
col=[-1,1,0,-1,-1,1,0,1]
def goTo(mat,x,y,visited):
    return(x>=0 and x< len(visited)) and (y>=0 and y < len(visited[0])) and mat[x][y]==1 and  not visited[x][y]
def BFS(mat,i,j, visited):
    q=collections.deque()
    q.append((i,j))
    visited[i][j]=True
    while q:
        x,y=q.popleft()
        for k in range(len(row)):
            if goTo(mat,x+row[k],y+col[k],visited):
                visited[x+row[k]][y+col[k]]=True
                q.append((x+row[k],y+col[k]))
island=0
for i in range(rows):
    for j in range(cols):
        if l[i][j]==1 and not visited[i][j]:
            BFS(l,i,j,visited)
            island+=1
print(island)
        
              
